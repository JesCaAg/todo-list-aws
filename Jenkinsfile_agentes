pipeline {
    agent none

    stages {
        stage('Get Code') {
            agent { label 'principal'} // Seleccionamos el agente nodo principal
            steps {
                sh '''
                    whoami
                    hostname
                '''
                withCredentials([string(credentialsId: 'token', variable: 'tokengh')]) {
                    git branch: 'develop', url: 'https://$tokengh@github.com/JesCaAg/todo-list-aws.git' // Traemos el codigo del repo autenticandonos
                }
            }
            post {
                always {
                    cleanWs()
                }
            }
        }
        
        stage('Static Test') {
            parallel { 
                stage('Static'){ // Ejecucion de pruebas de analisis de codigo estatico, usando flake8
                    agent { label 'static'} // Seleccionamos el agente que se encarga de las pruebas de codigo estatico y seguridad
                    steps {
                        bat '''
                            whoami
                            hostname
                        '''
                        bat 'py -m flake8 --format=pylint --exit-zero src >flake8.out'
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]
                    }
                    post {
                        always {
                            cleanWs()
                        }
                    }
                }
                
                stage('Security test'){ // Ejecucion de pruebas de seguridad, usando bandit
                    agent { label 'static'} // Seleccionamos el agente que se encarga de las pruebas de codigo estatico y seguridad
                    steps {
                        bat '''
                            whoami
                            hostname
                        '''
                        bat 'py -m bandit --exit-zero -r src -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"'
                        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]
                    }
                    post {
                        always {
                            cleanWs()
                        }
                    }
                }
            }
        }
        
        stage ('Deploy') { // Despliegue del stack de staging
            agent { label 'principal'} // Seleccionamos el agente nodo principal
            steps {
                sh '''
                    whoami
                    hostname
                '''
                sh '''
                    sam build --config-env staging
                    sam validate --config-env staging --region us-east-1
                    sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name staging-todo-list-aws --config-env staging --resolve-s3
                '''
                script {
                    sh '''
                        aws cloudformation describe-stacks \
                        --stack-name staging-todo-list-aws \
                        --query "Stacks[0].Outputs[?OutputKey==\\`BaseUrlApi\\`].OutputValue" \
                        --region us-east-1 \
                        --output text > url.txt
                    '''
                }
                stash includes: 'url.txt', name: 'url' 
            }
            post {
                always {
                    cleanWs()
                }
            }
        }
        
        stage ('Rest Test') { // Test de integracion
            agent { label 'rest'} // Seleccionamos el agente para pruebas rest
            steps {
                unstash 'url'
                sh '''
                    whoami
                    hostname
                '''
                script {
                    def URL = readFile('url.txt').trim()
                    withEnv(["BASE_URL=${URL}"]) {
                        def result = sh (script: 'python -m pytest --junitxml=junit-rest.xml test/integration/todoApiTest.py', returnStatus: true)
                        junit 'junit-rest.xml'
                        sh '[ -f junit-rest.xml ] && rm junit-rest.xml'
                        if (result != 0) {
                            error "Fallo alguna prueba, abortando pipeline."
                        }
                    }
                }
            }
            post {
                always {
                    cleanWs()
                }
            }
        }
        
        stage ('Promote') {
            agent { label 'principal'} // Seleccionamos el agente nodo principal
            steps {
                sh '''
                    whoami
                    hostname
                '''
                withCredentials([string(credentialsId: 'token', variable: 'tokengh')]) {
                    sh '''
                        git remote set-url origin https://$tokengh@github.com/JesCaAg/todo-list-aws.git
                        git fetch origin
                        git checkout master
                        git merge origin/develop --no-commit --no-ff || true
                        git checkout origin/master -- Jenkinsfile_agentes -- Jenkinsfile
                        git add .
                        git commit -m "Mergeo de develop en master manteniendo los Jenkinsfiles originales" || echo "Nada que commitear"
                        git push origin master
                    '''
                }
            }
            post {
                always {
                    cleanWs()
                }
            }
        }
    }
}
